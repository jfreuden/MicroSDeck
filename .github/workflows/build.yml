on:
  pull_request:
  push:
    branches: master

jobs:
  build:
    name: Build plugin
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      if: ${{ !env.ACT }}
      uses: actions/checkout@v3
    
    - uses: pnpm/action-setup@v2
      with:
        version: 8.9.2

    - name: Update Version
      run: |
        echo -n "-$(git rev-parse --short HEAD)" >> backend/version && \
        node util/versioning.mjs update package.json lib/package.json

    - name: Download Decky CLI
      run: |
        mkdir /tmp/decky-cli
        curl -L -o /tmp/decky-cli/decky "https://github.com/SteamDeckHomebrew/cli/releases/download/0.0.2/decky-linux-x86_64"
        chmod +x /tmp/decky-cli/decky

        echo "/tmp/decky-cli" >> $GITHUB_PATH

    - name: Build plugins
      run: |
        echo "::group::Building plugin MicroSDeck"

        # Run the CLI as root to get around Docker's weird permissions
        sudo $(which decky) plugin build -b -o /tmp/output -s directory .
        sudo chown -R $(whoami) .

        echo "::endgroup::"

    - name: Unzip Result
      run: |
        mkdir release && cd release
        unzip /tmp/output/MicroSDeck.zip

    - name: Upload Artifacts to Github
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v3
      with:
        name: "MicroSDeck"
        path: release/*

  deploy:
    if: github.ref == 'refs/heads/master'
    needs: build
    name: Deploy Package
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout
      if: ${{ !env.ACT }}
      uses: actions/checkout@v4

    - name: Update Version
      run: |
        echo -n "-$(git rev-parse --short HEAD)" >> backend/version && \
        node util/versioning.mjs update package.json lib/package.json

    - uses: actions/setup-node@v3
      with:
        node-version: 18
        registry-url: 'https://registry.npmjs.org'

    - uses: pnpm/action-setup@v2
      with:
        version: 8.9.2

    - name: Install, Build & Publish
      working-directory: lib    
      env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      run: |
        pnpm install && \
        pnpm build && \
        pnpm publish --no-git-checks --tag prerelease
